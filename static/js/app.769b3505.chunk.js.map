{"version":3,"sources":["color.js","style.js","App.js"],"names":["theme","styles","StyleSheet","create","container","flex","backgroundColor","paddingHorizontal","header","justifyContent","flexDirection","marginTop","input","paddingVertical","borderRadius","marginVertical","fontSize","toDo","alignItems","marginBottom","toDoText","fontWeight","marginLeft","height","Dimensions","get","App","useState","working","setWorking","text","setText","updateText","setUpdateText","toDos","setToDos","loading","setLoading","onChangeUpdateText","value","useEffect","load","saveToDos","a","async","AsyncStorage","setItem","JSON","stringify","saveWorking","getItem","toDosValue","workingValue","parse","console","log","deleteToDo","id","newToDos","View","style","StatusBar","TouchableOpacity","onPress","Text","color","TextInput","onSubmitEditing","Date","now","done","updating","returnKeyType","onChangeText","placeholder","ScrollView","ActivityIndicator","size","Object","keys","map","key","doneToDo","Fontisto","name","onLongPress","updateToDo","textDecorationLine","Platform","OS","confirm","Alert","alert","onDeletePress"],"mappings":"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","file":"static/js/app.769b3505.chunk.js","sourcesContent":["export const theme = {\n  bg: 'black',\n  grey: '#3A3D40',\n  inputGrey: '#878787',\n  white: 'white',\n  toDoBg: '#1A1C20',\n};\n","import { StyleSheet } from 'react-native';\nimport { theme } from './color';\n\nexport const styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: 'space-between',\n    flexDirection: 'row',\n    marginTop: 100,\n  },\n  input: {\n    backgroundColor: theme.white,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    borderRadius: 4,\n    marginVertical: 20,\n    fontSize: 16,\n  },\n  toDo: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    borderRadius: 4,\n  },\n  toDoText: {\n    fontSize: 16,\n    fontWeight: '500',\n    marginLeft: 15,\n  },\n});\n","import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { StatusBar } from 'expo-status-bar';\nimport { Fontisto } from '@expo/vector-icons';\nimport React, { useEffect, useState } from 'react';\nimport {\n  ActivityIndicator,\n  ScrollView,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n  Dimensions,\n  Alert,\n  Platform,\n} from 'react-native';\nimport { theme } from './color';\nimport { styles } from './style';\n\nconst TODOS = '@toDos';\nconst WORKING = '@working';\nconst height = Dimensions.get('screen').height;\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState('');\n  const [updateText, setUpdateText] = useState('');\n  const [toDos, setToDos] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  const travel = () => {\n    setWorking(false);\n    saveWorking('false');\n  };\n\n  const work = () => {\n    setWorking(true);\n    saveWorking('true');\n  };\n\n  const onChangeText = (value) => setText(value);\n\n  const onChangeUpdateText = (value) => setUpdateText(value);\n\n  useEffect(() => {\n    setLoading(true);\n    load();\n    setLoading(false);\n  }, []);\n\n  const saveToDos = async (value) => {\n    await AsyncStorage.setItem(TODOS, JSON.stringify(value));\n  };\n\n  const saveWorking = async (value) => {\n    await AsyncStorage.setItem(WORKING, value);\n  };\n\n  const load = async () => {\n    try {\n      const toDosValue = await AsyncStorage.getItem(TODOS);\n      const workingValue = await AsyncStorage.getItem(WORKING);\n      if (toDosValue) {\n        setToDos(JSON.parse(toDosValue));\n      }\n      if (workingValue) {\n        setWorking(JSON.parse(workingValue));\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const addToDo = async () => {\n    if (text === '') {\n      return;\n    }\n    const newToDos = {\n      ...toDos,\n      [Date.now()]: { text, working, done: false, updating: false },\n    };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText('');\n  };\n\n  const doneToDo = (id) => {\n    const newToDos = { ...toDos };\n    newToDos[id].done = !newToDos[id].done;\n    setToDos(newToDos);\n    saveToDos(newToDos);\n  };\n\n  const deleteToDo = async (id) => {\n    const newToDos = { ...toDos };\n    delete newToDos[id];\n    setToDos(newToDos);\n    saveToDos(newToDos);\n  };\n\n  const onDeletePress = (id) => {\n    if (Platform.OS === 'web') {\n      const ok = confirm('Do you want to delete this To Do?');\n      ok && deleteToDo(id);\n    } else {\n      Alert.alert('Delete To Do', 'Are you sure?', [\n        { text: 'Cancel', style: 'destructive' },\n        { text: \"I'm sure\", onPress: () => deleteToDo(id) },\n      ]);\n    }\n  };\n\n  const onLongPress = (id) => {\n    const newToDos = { ...toDos };\n    newToDos[id].updating = true;\n    setUpdateText(newToDos[id].text);\n    setToDos(newToDos);\n    saveToDos(newToDos);\n  };\n\n  const updateToDo = (id) => {\n    const newToDos = { ...toDos };\n    newToDos[id].updating = false;\n    newToDos[id].text = updateText;\n    setUpdateText('');\n    setToDos(newToDos);\n    saveToDos(newToDos);\n  };\n\n  const deleteAll = async () => {\n    setToDos({});\n    saveToDos({});\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              fontSize: 28,\n              fontWeight: '500',\n              color: working ? theme.white : theme.grey,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              fontSize: 28,\n              fontWeight: '500',\n              color: working ? theme.grey : theme.white,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        onSubmitEditing={addToDo}\n        returnKeyType=\"done\"\n        onChangeText={onChangeText}\n        value={text}\n        placeholder={working ? 'Add a To Do' : 'Where do you want to go?'}\n        style={styles.input}\n      />\n      <ScrollView>\n        {loading ? (\n          <View\n            style={{\n              height: height / 1.5,\n              justifyContent: 'center',\n            }}\n          >\n            <ActivityIndicator size={24} color=\"white\" />\n          </View>\n        ) : (\n          Object.keys(toDos).map((id) => {\n            if (toDos[id].working === working) {\n              return (\n                <View key={id} style={styles.toDo}>\n                  <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                    <TouchableOpacity onPress={() => doneToDo(id)}>\n                      {toDos[id].done ? (\n                        <Fontisto\n                          name=\"checkbox-active\"\n                          size={24}\n                          color={theme.grey}\n                        />\n                      ) : (\n                        <Fontisto\n                          name=\"checkbox-passive\"\n                          size={24}\n                          color={theme.grey}\n                        />\n                      )}\n                    </TouchableOpacity>\n                    <TouchableOpacity onLongPress={() => onLongPress(id)}>\n                      {toDos[id].updating ? (\n                        <TextInput\n                          style={{\n                            fontSize: 16,\n                            fontWeight: '500',\n                            marginLeft: 15,\n                            color: theme.inputGrey,\n                          }}\n                          value={updateText}\n                          onChangeText={onChangeUpdateText}\n                          returnKeyType=\"done\"\n                          onSubmitEditing={() => updateToDo(id)}\n                        />\n                      ) : (\n                        <Text\n                          style={{\n                            fontSize: 16,\n                            fontWeight: '500',\n                            marginLeft: 15,\n                            textDecorationLine: toDos[id].done\n                              ? 'line-through'\n                              : 'none',\n                            color: toDos[id].done ? theme.grey : theme.white,\n                          }}\n                        >\n                          {toDos[id].text}\n                        </Text>\n                      )}\n                    </TouchableOpacity>\n                  </View>\n                  <TouchableOpacity onPress={() => onDeletePress(id)}>\n                    <Fontisto name=\"trash\" size={16} color={theme.grey} />\n                  </TouchableOpacity>\n                </View>\n              );\n            }\n          })\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n"],"sourceRoot":""}